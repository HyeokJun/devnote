위키 생성
---------

	$ mkdir -p .git/objects
	$ mkdir -p .git/refs
	$ echo 'ref: refs/heads/master' > .git/HEAD

위키 페이지 작성
----------------

1. blob object 생성
	* 작성한 위키페이지의 내용으로, 다음과 같은 포맷의 blob object를 생성
	* `"blob" <SP> content-length <NUL> wikipage-content`
	* 이 blob object에 대한 sha1 해시값을 계산한 뒤 40자의 hexdigit으로 표현
	* blob object를 deflate 알고리즘으로 압축하여 .git/objects/<sha1 해시값 앞 2자리>/<sha1 해시값 나머지 38자리> 파일에 저장
2. tree object 생성
	* 위에서 생성한 것을 포함하여 모든 blob object에 대한 참조를 갖는 tree object를, 다음과 같은 포맷으로 생성
	* `"tree" <SP> content-length <NUL> 1*("100644" <SP> wikipage-name <NUL> sha-1)`
	* 이 tree object에 대한 sha1 해시값을 계산한 뒤 40자의 hexdigit으로 표현
	* tree object를 deflate 알고리즘으로 압축하여 .git/objects/<sha1 해시값 앞 2자리>/<sha1 해시값 나머지 38자리> 파일에 저장
3. 다음과 같은 포맷으로 commit object를 생성한 뒤 deflate 로 압축하여 .git/objects 파일로 저장
	* 위에서 생성한 tree object 에 대한 참조를 갖는 commit object를, 다음과 같은 포맷으로 생성
	`"commit" <SP> content-length <NUL>
	tree <SP> sha-1 <NEWLINE>
	parent <SP> sha-1 <NEWLINE>
	author <SP> name <SP> "<" mail ">" <SP> unixtime <SP> timezone-offset <NEWLINE>
	committer <SP> name <SP> "<" mail ">" <SP> unixtime <SP> timezone-offset <NEWLINE>
	<NEWLINE>
	log-message`
	* 이 commit object에 대한 sha1 해시값을 계산한 뒤 40자의 hexdigit으로 표현
	* commit object를 deflate 알고리즘으로 압축하여 .git/objects/<sha1 해시값 앞 2자리>/<sha1 해시값 나머지 38자리> 파일에 저장
4. .git/refs/heads/master 를 생성한 commit object 의 id 로 갱신

위키 페이지 삭제
----------------

1. .git/HEAD(가장 최신 commit을 가리키는 포인터)가 가리키는 commit의 tree 를 기반으로, 삭제한 페이지만 제외된 새 tree object 생성
2. 이 tree object를 갖는 commit object 생성
3. .git/refs/heads/master 를 생성한 commit object 의 id 로 갱신

위키 페이지 편집
----------------

1. 편집된 후의 내용으로 blob object 생성
2. .git/HEAD가 가리키는 commit의 tree 를 기반으로, 편집된 페이지의 id를 위에서 생성한 blob object의 id로 교체한 새 tree object 생성
3. 이 tree object를 갖는 commit object 생성
4. .git/refs/heads/master 를 생성한 commit object 의 id 로 갱신

위키 페이지 열람
----------------

1. .git/HEAD가 가리키는 commit의 tree에서 열람하고자 하는 페이지와 이름이 같은 blob의 id를 찾음
2. id에 해당하는 blob을 열어서 내용을 출력

위키 페이지 히스토리 출력
-------------------------

1. .git/HEAD가 가리키는 commit을 선택
2. 선택한 commit의 tree에서 열람하고자 하는 페이지와 이름이 같은 blob이 존재하는지 확인
3. 존재한다면 commit의 내용을 출력
4. 선택한 commmit의 parent가 존재하지 않는다면 중단, 존재한다면 선택 후 2로 돌아감.

위키 페이지를 특정 시점(commit)으로 되돌리기
--------------------------------------------

1. 지정한 commit의 tree를 확인하여 지정한 위키 페이지의 id를 알아냄
2. .git/HEAD가 가리키는 커밋의 tree 를 기반으로, 되돌리고자 하는 페이지의 id를, 위에서 알아낸 id로 교체한 새 tree object 생성
3. 이 tree object를 갖는 commit object 생성
4. .git/refs/heads/master 를 생성한 commit object 의 id 로 갱신
